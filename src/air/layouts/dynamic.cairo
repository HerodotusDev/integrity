mod autogenerated;
mod constants;
mod global_values;
mod public_input;
mod traces;

use cairo_verifier::{
    air::{
        constants::{SHIFT_POINT_X, SHIFT_POINT_Y, StarkCurve}, air::{AIRComposition, AIROods},
        diluted::get_diluted_product,
        periodic_columns::{
            eval_pedersen_x, eval_pedersen_y, eval_ecdsa_x, eval_ecdsa_y,
            eval_poseidon_poseidon_full_round_key0, eval_poseidon_poseidon_full_round_key1,
            eval_poseidon_poseidon_full_round_key2, eval_poseidon_poseidon_partial_round_key0,
            eval_poseidon_poseidon_partial_round_key1
        },
        public_input::{PublicInput, get_public_memory_product_ratio}
    },
    common::{math::{Felt252Div, Felt252PartialOrd, pow}, asserts::assert_range_u128}
};

impl StarknetAIRCompositionImpl of AIRComposition<InteractionElements, PublicInput> {
    fn eval_composition_polynomial(
        interaction_elements: InteractionElements,
        public_input: @PublicInput,
        mask_values: Span<felt252>,
        constraint_coefficients: Span<felt252>,
        point: felt252,
        trace_domain_size: felt252,
        trace_generator: felt252
    ) -> felt252 {// TODO REWRITE
    }
}

impl StarknetAIROodsImpl of AIROods {
    fn eval_oods_polynomial(
        column_values: Span<felt252>,
        oods_values: Span<felt252>,
        constraint_coefficients: Span<felt252>,
        point: felt252,
        oods_point: felt252,
        trace_generator: felt252,
    ) -> felt252 {// TODO REWRITE
    }
}
